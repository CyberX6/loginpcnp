{"version":3,"sources":["views/pages/authentication/Login.js","@core/components/input-password-toggle/index.js"],"names":["ToastContent","name","role","className","size","color","icon","defaultValues","password","loginEmail","Login","skin","useSkin","dispatch","useDispatch","history","useHistory","ability","useContext","AbilityContext","useForm","control","setError","handleSubmit","errors","formState","illustration","source","require","default","href","viewBox","version","height","x1","y1","x2","y2","id","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","lg","sm","src","alt","md","tag","top","right","target","placement","onSubmit","data","Object","values","every","field","length","useJwt","login","email","then","res","userData","accessToken","refreshToken","handleLogin","update","push","getHomeRouteForLoggedInUser","toast","success","fullName","username","transition","Slide","hideProgressBar","autoClose","catch","err","console","log","key","type","for","render","autoFocus","placeholder","invalid","to","block","InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","useState","inputVisibility","setInputVisibility","classnames","onClick","renderIcon","defaultProps"],"mappings":"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","file":"static/js/86.537ae87f.chunk.js","sourcesContent":["// ** React Imports\r\nimport { useContext, Fragment } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\n\r\n// ** Custom Hooks\r\nimport { useSkin } from '@hooks/useSkin'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\n\r\n// ** Third Party Components\r\nimport { useDispatch } from 'react-redux'\r\nimport { toast, Slide } from 'react-toastify'\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport { Facebook, Twitter, Mail, GitHub, HelpCircle, Coffee } from 'react-feather'\r\n\r\n// ** Actions\r\nimport { handleLogin } from '@store/authentication'\r\n\r\n// ** Context\r\nimport { AbilityContext } from '@src/utility/context/Can'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\nimport InputPasswordToggle from '@components/input-password-toggle'\r\n\r\n// ** Utils\r\nimport { getHomeRouteForLoggedInUser } from '@utils'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col, Form, Input, Label, Alert, Button, CardText, CardTitle, UncontrolledTooltip } from 'reactstrap'\r\n\r\n// ** Styles\r\nimport '@styles/react/pages/page-authentication.scss'\r\n\r\nconst ToastContent = ({ name, role }) => (\r\n  <Fragment>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\r\n        <h6 className='toast-title fw-bold'>Welcome, {name}</h6>\r\n      </div>\r\n    </div>\r\n    <div className='toastify-body'>\r\n      <span>You have successfully logged in as an {role} user to PCNP. Now you can start to explore. Enjoy!</span>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst defaultValues = {\r\n  password: 'admin',\r\n  loginEmail: 'admin@demo.com'\r\n}\r\n\r\nconst Login = () => {\r\n  // ** Hooks\r\n  const { skin } = useSkin()\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n  const ability = useContext(AbilityContext)\r\n  const {\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({ defaultValues })\r\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\r\n    source = require(`@src/assets/images/pages/${illustration}`).default\r\n\r\n  const onSubmit = data => {\r\n    if (Object.values(data).every(field => field.length > 0)) {\r\n      useJwt\r\n        .login({ email: data.loginEmail, password: data.password })\r\n        .then(res => {\r\n          const data = { ...res.data.userData, accessToken: res.data.accessToken, refreshToken: res.data.refreshToken }\r\n          dispatch(handleLogin(data))\r\n          ability.update(res.data.userData.ability)\r\n          history.push(getHomeRouteForLoggedInUser(data.role))\r\n          toast.success(\r\n            <ToastContent name={data.fullName || data.username || 'John Doe'} role={data.role || 'admin'} />,\r\n            { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n          )\r\n        })\r\n        .catch(err => console.log(err))\r\n    } else {\r\n      for (const key in data) {\r\n        if (data[key].length === 0) {\r\n          setError(key, {\r\n            type: 'manual'\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='auth-wrapper auth-cover'>\r\n      <Row className='auth-inner m-0'>\r\n        <a className='brand-logo' href='https://pncpwebsite.herokuapp.com/' >\r\n          <svg viewBox='0 0 139 95' version='1.1' height='28'>\r\n            <defs>\r\n              <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\r\n                <stop stopColor='#000000' offset='0%'></stop>\r\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\r\n              </linearGradient>\r\n              <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\r\n                <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\r\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\r\n              </linearGradient>\r\n            </defs>\r\n            <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\r\n              <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\r\n                <g id='Group' transform='translate(400.000000, 178.000000)'>\r\n                  <path\r\n                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\r\n                    id='Path'\r\n                    className='text-primary'\r\n                    style={{ fill: 'currentColor' }}\r\n                  ></path>\r\n                  <path\r\n                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\r\n                    id='Path'\r\n                    fill='url(#linearGradient-1)'\r\n                    opacity='0.2'\r\n                  ></path>\r\n                  <polygon\r\n                    id='Path-2'\r\n                    fill='#000000'\r\n                    opacity='0.049999997'\r\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\r\n                  ></polygon>\r\n                  <polygon\r\n                    id='Path-2'\r\n                    fill='#000000'\r\n                    opacity='0.099999994'\r\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\r\n                  ></polygon>\r\n                  <polygon\r\n                    id='Path-3'\r\n                    fill='url(#linearGradient-2)'\r\n                    opacity='0.099999994'\r\n                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\r\n                  ></polygon>\r\n                </g>\r\n              </g>\r\n            </g>\r\n          </svg>\r\n          <h2 className='brand-text text-primary ms-1'>PCNP</h2>\r\n        </a>\r\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\r\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\r\n            <img className='img-fluid' src={source} alt='Login Cover' />\r\n          </div>\r\n        </Col>\r\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\r\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\r\n            <CardTitle tag='h2' className='fw-bold mb-1'>\r\n              Welcome to PCNP! 👋\r\n            </CardTitle>\r\n            <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\r\n            <Alert color='primary'>\r\n              <div className='alert-body font-small-2'>\r\n                <p>\r\n                  <small className='me-50'>\r\n                    <span className='fw-bold'>Admin:</span> admin@demo.com | admin\r\n                  </small>\r\n                </p>\r\n                <p>\r\n                  <small className='me-50'>\r\n                    <span className='fw-bold'>Client:</span> client@demo.com | client\r\n                  </small>\r\n                </p>\r\n              </div>\r\n              <HelpCircle\r\n                id='login-tip'\r\n                className='position-absolute'\r\n                size={18}\r\n                style={{ top: '10px', right: '10px' }}\r\n              />\r\n              <UncontrolledTooltip target='login-tip' placement='left'>\r\n                This is just for ACL demo purpose.\r\n              </UncontrolledTooltip>\r\n            </Alert>\r\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\r\n              <div className='mb-1'>\r\n                <Label className='form-label' for='login-email'>\r\n                  Email\r\n                </Label>\r\n                <Controller\r\n                  id='loginEmail'\r\n                  name='loginEmail'\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      autoFocus\r\n                      type='email'\r\n                      placeholder='john@example.com'\r\n                      invalid={errors.loginEmail && true}\r\n                      {...field}\r\n                    />\r\n                  )}\r\n                />\r\n              </div>\r\n              <div className='mb-1'>\r\n                <div className='d-flex justify-content-between'>\r\n                  <Label className='form-label' for='login-password'>\r\n                    Password\r\n                  </Label>\r\n                  <Link to='/forgot-password'>\r\n                    <small>Forgot Password?</small>\r\n                  </Link>\r\n                </div>\r\n                <Controller\r\n                  id='password'\r\n                  name='password'\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\r\n                  )}\r\n                />\r\n              </div>\r\n              <div className='form-check mb-1'>\r\n                <Input type='checkbox' id='remember-me' />\r\n                <Label className='form-check-label' for='remember-me'>\r\n                  Remember Me\r\n                </Label>\r\n              </div>\r\n              <Button type='submit' color='primary' block>\r\n                Sign in\r\n              </Button>\r\n            </Form>\r\n            <p className='text-center mt-2'>\r\n              <span className='me-25'>New on our platform?</span>\r\n              <Link to='/register'>\r\n                <span>Create an account</span>\r\n              </Link>\r\n            </p>\r\n            <div className='divider my-2'>\r\n              <div className='divider-text'>or</div>\r\n            </div>\r\n            <div className='auth-footer-btn d-flex justify-content-center'>\r\n            <Button href=\"https://www.facebook.com/PCNProtocol/\" color='facebook'>\r\n                \r\n                <Facebook size={14} />\r\n              </Button>\r\n              <Button href=\"https://twitter.com/PcnProtocol\" color='twitter'>\r\n                <Twitter size={14} />\r\n              </Button>\r\n              <Button color='google'>\r\n                <Mail size={14} />\r\n              </Button>\r\n              <Button href=\"https://www.reddit.com/r/PCNProtocol/\" className='me-0' color='github'>\r\n                <GitHub size={14} />\r\n              </Button>\r\n            </div>\r\n          </Col>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","// ** React Imports\r\nimport { Fragment, useState, forwardRef } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = forwardRef((props, ref) => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    invalid,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? (\r\n        <Label className='form-label' for={htmlFor}>\r\n          {label}\r\n        </Label>\r\n      ) : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className,\r\n          'is-invalid': invalid\r\n        })}\r\n      >\r\n        <Input\r\n          ref={ref}\r\n          invalid={invalid}\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          {renderIcon()}\r\n        </InputGroupText>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n})\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  invalid: PropTypes.bool,\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n"],"sourceRoot":""}